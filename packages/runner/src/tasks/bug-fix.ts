import { Job } from '@ollama-turbo-agent/shared'
import { promises as fs } from 'fs'
import path from 'path'
import { BaseTask, TaskResult } from './executor.js'

export class BugFixTask extends BaseTask {
  async execute(job: Job): Promise<TaskResult> {
    const branchName = await this.createWorkingBranch(job, 'bugfix/')
    const errorDescription = job.taskParams.args || 'General bug fixes'
    
    const filesToFix = await this.findFilesToFix(errorDescription)
    const fixedFiles: string[] = []

    for (const filePath of filesToFix.slice(0, 5)) {
      try {
        const fixed = await this.fixBugsInFile(filePath, errorDescription, job)
        if (fixed) {
          fixedFiles.push(path.relative(this.workspace, filePath))
        }
      } catch (error) {
        console.warn(`Failed to fix bugs in ${filePath}:`, error)
      }
    }

    if (fixedFiles.length === 0) {
      return {
        success: false,
        changes: { files: [], additions: 0, deletions: 0 },
        summary: 'No bugs could be fixed automatically'
      }
    }

    const commitMessage = `fix: ${errorDescription}\n\nFixed bugs in ${fixedFiles.length} files with AI assistance`
    await this.commitAndPush(job, branchName, commitMessage)

    const prTitle = `üêõ Fix: ${errorDescription}`
    const prBody = this.generatePullRequestBody(errorDescription, fixedFiles)
    
    const pullRequestUrl = await this.createPullRequest(job, branchName, prTitle, prBody)

    return {
      success: true,
      changes: {
        files: fixedFiles,
        additions: fixedFiles.length * 5,
        deletions: fixedFiles.length * 3
      },
      summary: `Fixed bugs in ${fixedFiles.length} files: ${errorDescription}`,
      branchName,
      pullRequestUrl
    }
  }

  private async findFilesToFix(errorDescription: string): Promise<string[]> {
    const extensions = ['.ts', '.js', '.tsx', '.jsx', '.py']
    const files: string[] = []

    const scanDirectory = async (dir: string): Promise<void> => {
      const entries = await fs.readdir(dir, { withFileTypes: true })
      
      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name)
        
        if (entry.isDirectory()) {
          if (!this.shouldSkipDirectory(entry.name)) {
            await scanDirectory(fullPath)
          }
        } else if (entry.isFile()) {
          const ext = path.extname(entry.name)
          if (extensions.includes(ext)) {
            files.push(fullPath)
          }
        }
      }
    }

    await scanDirectory(this.workspace)
    return files
  }

  private shouldSkipDirectory(name: string): boolean {
    return ['node_modules', '.git', 'dist', 'build'].includes(name) || name.startsWith('.')
  }

  private async fixBugsInFile(
    filePath: string,
    errorDescription: string,
    job: Job
  ): Promise<boolean> {
    const content = await fs.readFile(filePath, 'utf-8')
    
    if (content.length < 50 || content.length > 20000) {
      return false
    }

    const fixedContent = await this.ollama.fixBugs(
      content,
      errorDescription,
      job.taskParams.model || 'gpt-oss:120b'
    )

    if (this.isValidFix(content, fixedContent)) {
      await fs.writeFile(filePath, fixedContent, 'utf-8')
      return true
    }

    return false
  }

  private isValidFix(original: string, fixed: string): boolean {
    if (fixed.length < 20) {
      return false
    }
    
    if (original === fixed) {
      return false
    }
    
    const originalLines = original.split('\n').length
    const fixedLines = fixed.split('\n').length
    
    if (Math.abs(originalLines - fixedLines) / originalLines > 0.3) {
      return false
    }
    
    return true
  }

  private generatePullRequestBody(errorDescription: string, fixedFiles: string[]): string {
    return `## üêõ Bug Fix

**Issue:** ${errorDescription}

### Fixed Files
${fixedFiles.map(file => `- \`${file}\``).join('\n')}

### Bug Fixes Applied:
- ‚úÖ Root cause analysis and resolution
- ‚úÖ Error handling improvements
- ‚úÖ Logic corrections
- ‚úÖ Edge case handling
- ‚úÖ Validation enhancements

### Testing:
- Manual testing recommended
- Verify the specific issue is resolved
- Check for any regression issues

---
*This PR was automatically generated by Ollama Turbo Agent*`
  }
}


